{"version":3,"sources":["ng://@knora/authentication/lib/session/session.service.ts","ng://@knora/authentication/lib/guard/auth.guard.ts","ng://@knora/authentication/lib/interceptor/jwt.interceptor.ts","ng://@knora/authentication/lib/interceptor/error.interceptor.ts","ng://@knora/authentication/lib/authentication.service.ts","ng://@knora/authentication/lib/login-form/login-form.component.ts","ng://@knora/authentication/lib/authentication.module.ts"],"names":["moment","momentImported","SessionService","_http","config","_users","this","prototype","setSession","jwt","username","_this","getUser","subscribe","result","sysAdmin","permissions","groupsPerProject","KnoraConstants","SystemProjectIRI","indexOf","SystemAdminGroupIRI","session","id","setTimestamp","user","name","lang","localStorage","setItem","JSON","stringify","error","console","add","valueOf","getSession","updateSession","validateSession","parse","getItem","tsNow","MAX_SESSION_TIME","authenticate","log","destroySession","get","api","pipe","map","status","removeItem","Injectable","args","providedIn","HttpClient","KuiCoreConfig","decorators","type","Inject","UsersService","AuthGuard","_session","_router","canActivate","next","state","navigate","queryParams","returnUrl","url","Router","JwtInterceptor","intercept","request","clone","setHeaders","Authorization","handle","ErrorInterceptor","catchError","err","message","statusText","throwError","AuthenticationService","http","login","identifier","password","post","observe","response","handleRequestError","logout","serviceError","ApiServiceError","errorInfo","LoginFormComponent","_auth","_fb","_route","title","pw","button","remember","forgot_pw","failed","server","email","required","ngOnInit","loggedInUser","buildForm","frm","group","Validators","valueChanges","data","onValueChanged","form","Object","keys","formErrors","field","control","dirty","valid","messages_1","validationMessages","errors","key","doLogin","errorMessage","undefined","loginErrorUser","loginErrorPw","loginErrorServer","invalid","loading","value","body","token","setTimeout","snapshot","location","reload","Component","selector","template","styles","FormBuilder","ActivatedRoute","Input","KuiAuthenticationModule","NgModule","imports","CommonModule","KuiActionModule","MatCardModule","MatIconModule","MatInputModule","MatButtonModule","MatDialogModule","MatFormFieldModule","ReactiveFormsModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { ApiServiceError, KnoraConstants, KuiCoreConfig, Session, User, UsersService } from '@knora/core';\n\nimport * as momentImported from 'moment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst moment = momentImported;\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SessionService {\n\n    public session: Session;\n\n    /**\n     * max session time in milliseconds\n     * default value (24h): 86400000\n     *\n     */\n    readonly MAX_SESSION_TIME: number = 86400000; // 1d = 24 * 60 * 60 * 1000\n\n    constructor(\n        private _http: HttpClient,\n        @Inject('config') public config: KuiCoreConfig,\n        private _users: UsersService) {\n    }\n\n    /**\n     * set the session by using the json web token (jwt) and the user object;\n     * it will be used in the login process\n     *\n     * @param jwt\n     * @param username\n     */\n    setSession(jwt: string, username: string) {\n\n        // get user information\n        this._users.getUser(username).subscribe(\n            (result: User) => {\n                let sysAdmin: boolean = false;\n\n                const permissions = result.permissions;\n                if (permissions.groupsPerProject[KnoraConstants.SystemProjectIRI]) {\n                    sysAdmin = permissions.groupsPerProject[KnoraConstants.SystemProjectIRI]\n                        .indexOf(KnoraConstants.SystemAdminGroupIRI) > -1;\n                }\n\n                // define a session id, which is the timestamp of login\n                this.session = {\n                    id: this.setTimestamp(),\n                    user: {\n                        name: result.username,\n                        jwt: jwt,\n                        lang: result.lang,\n                        sysAdmin: sysAdmin\n                    }\n                };\n                // store in the localStorage\n                localStorage.setItem('session', JSON.stringify(this.session));\n\n            },\n            (error: ApiServiceError) => {\n                console.error(error);\n            }\n        );\n    }\n\n    private setTimestamp() {\n        return (moment().add(0, 'second')).valueOf();\n    }\n\n    getSession() {\n\n    }\n\n    updateSession() {\n\n    }\n\n    validateSession() {\n        // mix of checks with session.validation and this.authenticate\n        this.session = JSON.parse(localStorage.getItem('session'));\n\n        const tsNow: number = this.setTimestamp();\n\n        if (this.session) {\n            // the session exists\n            // check if the session is still valid:\n            // if session.id + MAX_SESSION_TIME > now: _session.validateSession()\n            if (this.session.id + this.MAX_SESSION_TIME < tsNow) {\n                // the internal session has expired\n                // check if the api v2/authentication is still valid\n\n                if (this.authenticate()) {\n                    // the api authentication is valid;\n                    // update the session.id\n                    this.session.id = tsNow;\n\n                    console.log('new session id', this.session.id);\n                    // localStorage.removeItem('session');\n                    localStorage.setItem('session', JSON.stringify(this.session));\n                    return true;\n\n                } else {\n                    // console.error('session.service -- validateSession -- authenticate: the session expired on API side');\n                    // a user is not authenticated anymore!\n                    this.destroySession();\n                    return false;\n                }\n\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    private authenticate(): Observable<boolean> {\n        return this._http.get(this.config.api + '/v2/authentication').pipe(\n            map((result: any) => {\n\n                console.log('AuthenticationService - authenticate - result: ', result);\n                // return true || false\n                return result.status === 200;\n            })\n        );\n    }\n\n    destroySession() {\n        localStorage.removeItem('session');\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SessionService } from '../session/session.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(private _session: SessionService,\n                private _router: Router) {\n\n    }\n\n    canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n        if (!this._session.validateSession()) {\n            this._router.navigate(['login'], {queryParams: {returnUrl: state.url}});\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SessionService } from '../session/session.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n    constructor(private _session: SessionService) {\n    }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add authorization header with jwt token if available\n\n        if (this._session.validateSession()) {\n            // the session is valid (and up to date)\n            const jwt = JSON.parse(localStorage.getItem('session')).user.jwt;\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${jwt}`\n                }\n            });\n        } else {\n            this._session.destroySession();\n        }\n\n        return next.handle(request);\n    }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n// import { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    /*\n    constructor(private _authService: AuthenticationService) {\n    }\n*/\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n\n            console.log('authentication -- error.interceptor', err);\n\n            if (err.status === 401) {\n                // auto logout if 401 response returned from api\n//                this._authService.logout();\n                    // the following location.reload is used for the auth.guard in app routing\n                // to go to the login page\n//                location.reload(true);\n            }\n\n\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }));\n    }\n}\n","import { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { ApiServiceError, KuiCoreConfig } from '@knora/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SessionService } from './session/session.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthenticationService {\n\n    constructor(public http: HttpClient,\n                private _session: SessionService,\n                @Inject('config') public config: KuiCoreConfig) {\n\n    }\n\n    /**\n     * validate if a user is logged in or not\n     * and the session is active\n     */\n    session(): boolean {\n        return this._session.validateSession();\n    }\n\n    /**\n     * login process;\n     * it's used by the login component\n     *\n     * @param identifier (email or username)\n     * @param password\n     * @returns\n     */\n    login(identifier: string, password: string): Observable<any> {\n\n        return this.http.post(\n            this.config.api + '/v2/authentication',\n            {identifier: identifier, password: password},\n            {observe: 'response'}).pipe(\n                map((response: HttpResponse<any>): any => {\n                    return response;\n                }),\n                catchError((error: HttpErrorResponse) => {\n\n                    return this.handleRequestError(error);\n                })\n            );\n    }\n\n\n    logout() {\n        // destroy the session\n        localStorage.removeItem('session');\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param error\n     * @returns\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        const serviceError = new ApiServiceError();\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiServiceError, ApiServiceResult } from '@knora/core';\nimport { AuthenticationService } from '../authentication.service';\nimport { SessionService } from '../session/session.service';\n\n@Component({\n    selector: 'kui-login-form',\n    template: `<div class=\"login-form\" *ngIf=\"!loggedInUser\">\n    <div class=\"login-form-header\">\n        <h3 mat-subheader>{{login.title}}</h3>\n    </div>\n    <div class=\"login-form-content\">\n        <!-- This is the login form -->\n        <form class=\"login-form\" [formGroup]=\"frm\" (ngSubmit)=\"doLogin()\">\n            <!-- Error message -->\n            <mat-hint *ngIf=\"errorMessage !== undefined\" class=\"full-width\">\n                <span *ngIf=\"loginErrorUser || loginErrorPw\">{{login.error.failed}}</span>\n                <span *ngIf=\"loginErrorServer\">{{login.error.server}}</span>\n            </mat-hint>\n\n            <!-- Username -->\n            <mat-form-field class=\"full-width login-field\">\n                <mat-icon matPrefix>person</mat-icon>\n                <input matInput autofocus [placeholder]=\"login.name\" autocomplete=\"username\" formControlName=\"email\">\n                <mat-hint *ngIf=\"formErrors.email\" class=\"login-error\">{{login.error.failed}}</mat-hint>\n            </mat-form-field>\n\n            <!-- Password -->\n            <mat-form-field class=\"full-width login-field\">\n                <mat-icon matPrefix>lock</mat-icon>\n                <input matInput type=\"password\" [placeholder]=\"login.pw\" autocomplete=\"current-password\" formControlName=\"password\">\n                <mat-hint *ngIf=\"formErrors.password\" class=\"login-error\">{{login.error.failed}}</mat-hint>\n            </mat-form-field>\n\n            <!-- Button: Login -->\n            <div class=\"button-row full-width\">\n                <button mat-raised-button type=\"submit\"\n                        *ngIf=\"!loading\"\n                        [disabled]=\"!frm.valid\"\n                        class=\"full-width submit-button mat-primary\">\n                    {{login.button}}\n                </button>\n                <kui-progress-indicator *ngIf=\"loading\" [color]=\"color\"></kui-progress-indicator>\n            </div>\n        </form>\n    </div>\n</div>\n\n<!-- a user is already logged in; show who it is and a logout button -->\n\n<div class=\"logout-form\" *ngIf=\"loggedInUser\">\n    <p>A user is already logged in:</p>\n    <p>{{loggedInUser}}</p>\n    <br>\n    <p>If it's not you, please logout!</p>\n    <div class=\"button-row full-width\">\n        <button mat-raised-button\n                (click)=\"logout()\"\n                *ngIf=\"!loading\"\n                class=\"full-width mat-warn\">\n            LOGOUT\n        </button>\n        <kui-progress-indicator *ngIf=\"loading\"></kui-progress-indicator>\n    </div>\n</div>\n`,\n    styles: [`.full-width{width:100%}.button-row,.mat-form-field,.mat-hint{margin-top:24px}.mat-hint{background:rgba(239,83,80,.39);display:block;margin-left:-16px;padding:16px;text-align:center;width:280px}.login-form,.logout-form{margin-left:auto;margin-right:auto;position:relative;width:280px}.login-form .login-form-header,.logout-form .login-form-header{margin-bottom:24px}.login-form .login-field .mat-icon,.logout-form .login-field .mat-icon{font-size:20px;margin-right:12px}.login-form .button-row,.logout-form .button-row{margin-top:48px}.sign-up{margin-top:24px}`]\n})\nexport class LoginFormComponent implements OnInit {\n\n    /**\n     * navigate to the defined url after login\n     */\n    @Input() navigate?: string;\n\n    /**\n     * set your theme color here,\n     * it will be used in the progress-indicator\n     */\n    @Input() color?: string;\n\n    returnUrl: string;\n\n    // is there already a valid session?\n    loggedInUser: string;\n\n    // form\n    frm: FormGroup;\n\n    loading = false;\n\n    // general error message\n    errorMessage: any;\n\n    // specific error messages\n    loginErrorUser = false;\n    loginErrorPw = false;\n    loginErrorServer = false;\n\n    // labels for the login form\n    login = {\n        title: 'Login',\n        name: 'Username',\n        pw: 'Password',\n        button: 'Login',\n        remember: 'Remember me',\n        forgot_pw: 'Forgot password?',\n        error: {\n            failed: 'Password or username is wrong',\n            server: 'There\\'s an error with the server connection. Try it again later or inform the Knora Team'\n        }\n    };\n\n    // error definitions for the following form fields\n    formErrors = {\n        'email': '',\n        'password': ''\n    };\n\n    // error messages for the form fields defined in formErrors\n    validationMessages = {\n        'email': {\n            'required': 'user name is required.'\n        },\n        'password': {\n            'required': 'password is required'\n        }\n    };\n\n\n    constructor(private _auth: AuthenticationService,\n                private _session: SessionService,\n                private _fb: FormBuilder,\n                private _route: ActivatedRoute,\n                private _router: Router) {\n    }\n\n    ngOnInit() {\n\n        // check if a user is already logged in\n        if (this._session.validateSession()) {\n            this.loggedInUser = JSON.parse(localStorage.getItem('session')).user.name;\n        } else {\n            this.buildForm();\n        }\n    }\n\n    buildForm(): void {\n        this.frm = this._fb.group({\n            email: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        this.frm.valueChanges\n            .subscribe(data => this.onValueChanged(data));\n    }\n\n    /**\n     * check for errors while using the form\n     * @param data\n     */\n    onValueChanged(data?: any) {\n\n        if (!this.frm) {\n            return;\n        }\n\n        const form = this.frm;\n\n        Object.keys(this.formErrors).map(field => {\n            this.formErrors[field] = '';\n            const control = form.get(field);\n            if (control && control.dirty && !control.valid) {\n                const messages = this.validationMessages[field];\n                Object.keys(control.errors).map(key => {\n                    this.formErrors[field] += messages[key] + ' ';\n                });\n            }\n        });\n    }\n\n    doLogin() {\n\n        // reset the error messages\n        this.errorMessage = undefined;\n        this.loginErrorUser = false;\n        this.loginErrorPw = false;\n        this.loginErrorServer = false;\n\n        // make sure form values are valid\n        if (this.frm.invalid) {\n            this.loginErrorPw = true;\n            this.loginErrorUser = true;\n            return;\n        }\n\n        // Reset status\n        this.loading = true;\n\n        // Grab values from form\n        const username = this.frm.get('email').value;\n        const password = this.frm.get('password').value;\n\n        this._auth.login(username, password)\n            .subscribe(\n                (response: ApiServiceResult) => {\n\n                    // we have a token; set the session now\n                    this._session.setSession(response.body.token, username);\n\n                    setTimeout(() => {\n                        // get return url from route parameters or default to '/'\n                        this.returnUrl = this._route.snapshot.queryParams['returnUrl'] || '/';\n\n\n                        // go back to the previous route or to the route defined in the @Input if navigate exists\n                        if (!this.navigate) {\n                            this._router.navigate([this.returnUrl]);\n                        } else {\n                            this._router.navigate([this.navigate]);\n                        }\n\n                        this.loading = false;\n                    }, 2000);\n                },\n                (error: ApiServiceError) => {\n                    // error handling\n                    if (error.status === 0) {\n                        this.loginErrorUser = false;\n                        this.loginErrorPw = false;\n                        this.loginErrorServer = true;\n                    }\n                    if (error.status === 401) {\n                        this.loginErrorUser = false;\n                        this.loginErrorPw = true;\n                        this.loginErrorServer = false;\n                    }\n                    if (error.status === 404) {\n                        this.loginErrorUser = true;\n                        this.loginErrorPw = false;\n                        this.loginErrorServer = false;\n                    }\n                    this.errorMessage = <any> error;\n                    this.loading = false;\n                }\n            );\n\n    }\n\n    logout() {\n        this._auth.logout();\n        location.reload(true);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatCardModule, MatDialogModule, MatFormFieldModule, MatIconModule, MatInputModule } from '@angular/material';\nimport { KuiActionModule } from '@knora/action';\n\nimport { LoginFormComponent } from './login-form/login-form.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        KuiActionModule,\n        MatCardModule,\n        MatIconModule,\n        MatInputModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        ReactiveFormsModule,\n        HttpClientModule\n    ],\n    declarations: [\n        LoginFormComponent\n    ],\n    exports: [\n        LoginFormComponent\n    ]\n})\nexport class KuiAuthenticationModule {\n}\n"]}