{"version":3,"file":"knora-authentication.umd.js.map","sources":["ng://@knora/authentication/lib/session/session.service.ts","ng://@knora/authentication/lib/guard/auth.guard.ts","ng://@knora/authentication/lib/interceptor/jwt.interceptor.ts","ng://@knora/authentication/lib/interceptor/error.interceptor.ts","ng://@knora/authentication/lib/authentication.service.ts","ng://@knora/authentication/lib/login-form/login-form.component.ts","ng://@knora/authentication/lib/authentication.module.ts","ng://@knora/authentication/public_api.ts","ng://@knora/authentication/knora-authentication.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { ApiServiceError, KnoraConstants, KuiCoreConfig, Session, User, UsersService } from '@knora/core';\n\nimport * as momentImported from 'moment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst moment = momentImported;\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SessionService {\n\n    public session: Session;\n\n    /**\n     * max session time in milliseconds\n     * default value (24h): 86400000\n     *\n     */\n    readonly MAX_SESSION_TIME: number = 86400000; // 1d = 24 * 60 * 60 * 1000\n\n    constructor(\n        private _http: HttpClient,\n        @Inject('config') public config: KuiCoreConfig,\n        private _users: UsersService) {\n    }\n\n    /**\n     * set the session by using the json web token (jwt) and the user object;\n     * it will be used in the login process\n     *\n     * @param jwt\n     * @param username\n     */\n    setSession(jwt: string, username: string) {\n\n        // get user information\n        this._users.getUser(username).subscribe(\n            (result: User) => {\n                let sysAdmin: boolean = false;\n\n                const permissions = result.permissions;\n                if (permissions.groupsPerProject[KnoraConstants.SystemProjectIRI]) {\n                    sysAdmin = permissions.groupsPerProject[KnoraConstants.SystemProjectIRI]\n                        .indexOf(KnoraConstants.SystemAdminGroupIRI) > -1;\n                }\n\n                // define a session id, which is the timestamp of login\n                this.session = {\n                    id: this.setTimestamp(),\n                    user: {\n                        name: username,\n                        jwt: jwt,\n                        lang: result.lang,\n                        sysAdmin: sysAdmin\n                    }\n                };\n                // store in the localStorage\n                localStorage.setItem('session', JSON.stringify(this.session));\n\n            },\n            (error: ApiServiceError) => {\n                console.error(error);\n            }\n        );\n    }\n\n    private setTimestamp() {\n        return (moment().add(0, 'second')).valueOf();\n    }\n\n    getSession() {\n\n    }\n\n    updateSession() {\n\n    }\n\n    validateSession() {\n        // mix of checks with session.validation and this.authenticate\n        this.session = JSON.parse(localStorage.getItem('session'));\n\n        const tsNow: number = this.setTimestamp();\n\n        if (this.session) {\n            // the session exists\n            // check if the session is still valid:\n            // if session.id + MAX_SESSION_TIME > now: _session.validateSession()\n            if (this.session.id + this.MAX_SESSION_TIME < tsNow) {\n                // the internal session has expired\n                // check if the api v2/authentication is still valid\n\n                if (this.authenticate()) {\n                    // the api authentication is valid;\n                    // update the session.id\n                    this.session.id = tsNow;\n\n                    console.log('new session id', this.session.id);\n                    // localStorage.removeItem('session');\n                    localStorage.setItem('session', JSON.stringify(this.session));\n                    return true;\n\n                } else {\n                    // console.error('session.service -- validateSession -- authenticate: the session expired on API side');\n                    // a user is not authenticated anymore!\n                    this.destroySession();\n                    return false;\n                }\n\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    private authenticate(): Observable<boolean> {\n        return this._http.get(this.config.api + '/v2/authentication').pipe(\n            map((result: any) => {\n\n                console.log('AuthenticationService - authenticate - result: ', result);\n                // return true || false\n                return result.status === 200;\n            })\n        );\n    }\n\n    destroySession() {\n        localStorage.removeItem('session');\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SessionService } from '../session/session.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(private _session: SessionService,\n                private _router: Router) {\n\n    }\n\n    canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n        if (!this._session.validateSession()) {\n            this._router.navigate(['login'], {queryParams: {returnUrl: state.url}});\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SessionService } from '../session/session.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n    constructor(private _session: SessionService) {\n    }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add authorization header with jwt token if available\n\n        if (this._session.validateSession()) {\n            // the session is valid (and up to date)\n            const jwt = JSON.parse(localStorage.getItem('session')).user.jwt;\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${jwt}`\n                }\n            });\n        } else {\n            this._session.destroySession();\n        }\n\n        return next.handle(request);\n    }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n// import { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    /*\n    constructor(private _authService: AuthenticationService) {\n    }\n*/\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n\n            console.log('authentication -- error.interceptor', err);\n\n            if (err.status === 401) {\n                // auto logout if 401 response returned from api\n//                this._authService.logout();\n                    // the following location.reload is used for the auth.guard in app routing\n                // to go to the login page\n//                location.reload(true);\n            }\n\n\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }));\n    }\n}\n","import { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { ApiServiceError, KuiCoreConfig } from '@knora/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SessionService } from './session/session.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthenticationService {\n\n    constructor(public http: HttpClient,\n                private _session: SessionService,\n                @Inject('config') public config: KuiCoreConfig) {\n\n    }\n\n    /**\n     * validate if a user is logged in or not\n     * and the session is active\n     */\n    session(): boolean {\n        return this._session.validateSession();\n    }\n\n    /**\n     * login process;\n     * it's used by the login component\n     *\n     * @param identifier (email or username)\n     * @param password\n     * @returns\n     */\n    login(identifier: string, password: string): Observable<any> {\n\n        return this.http.post(\n            this.config.api + '/v2/authentication',\n            {identifier: identifier, password: password},\n            {observe: 'response'}).pipe(\n                map((response: HttpResponse<any>): any => {\n                    return response;\n                }),\n                catchError((error: HttpErrorResponse) => {\n\n                    return this.handleRequestError(error);\n                })\n            );\n    }\n\n\n    logout() {\n        // destroy the session\n        localStorage.removeItem('session');\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param error\n     * @returns\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        const serviceError = new ApiServiceError();\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiServiceError, ApiServiceResult } from '@knora/core';\nimport { AuthenticationService } from '../authentication.service';\nimport { SessionService } from '../session/session.service';\n\n@Component({\n    selector: 'kui-login-form',\n    template: `<div class=\"login-form\" *ngIf=\"!loggedInUser\">\n    <div class=\"login-form-header\">\n        <h3 mat-subheader>{{login.title}}</h3>\n    </div>\n    <div class=\"login-form-content\">\n        <!-- This is the login form -->\n        <form class=\"login-form\" [formGroup]=\"frm\" (ngSubmit)=\"doLogin()\">\n            <!-- Error message -->\n            <mat-hint *ngIf=\"errorMessage !== undefined\" class=\"full-width\">\n                <span *ngIf=\"loginErrorUser || loginErrorPw\">{{login.error.failed}}</span>\n                <span *ngIf=\"loginErrorServer\">{{login.error.server}}</span>\n            </mat-hint>\n\n            <!-- Username -->\n            <mat-form-field class=\"full-width login-field\">\n                <mat-icon matPrefix>person</mat-icon>\n                <input matInput autofocus [placeholder]=\"login.name\" autocomplete=\"username\" formControlName=\"identifier\">\n                <mat-hint *ngIf=\"formErrors.identifier\" class=\"login-error\">{{login.error.failed}}</mat-hint>\n            </mat-form-field>\n\n            <!-- Password -->\n            <mat-form-field class=\"full-width login-field\">\n                <mat-icon matPrefix>lock</mat-icon>\n                <input matInput type=\"password\" [placeholder]=\"login.pw\" autocomplete=\"current-password\" formControlName=\"password\">\n                <mat-hint *ngIf=\"formErrors.password\" class=\"login-error\">{{login.error.failed}}</mat-hint>\n            </mat-form-field>\n\n            <!-- Button: Login -->\n            <div class=\"button-row full-width\">\n                <button mat-raised-button type=\"submit\"\n                        *ngIf=\"!loading\"\n                        [disabled]=\"!frm.valid\"\n                        class=\"full-width submit-button mat-primary\">\n                    {{login.button}}\n                </button>\n                <kui-progress-indicator *ngIf=\"loading\" [color]=\"color\"></kui-progress-indicator>\n            </div>\n        </form>\n    </div>\n</div>\n\n<!-- a user is already logged in; show who it is and a logout button -->\n\n<div class=\"logout-form\" *ngIf=\"loggedInUser\">\n    <p>A user is already logged in:</p>\n    <p>{{loggedInUser}}</p>\n    <br>\n    <p>If it's not you, please logout!</p>\n    <div class=\"button-row full-width\">\n        <button mat-raised-button\n                (click)=\"logout()\"\n                *ngIf=\"!loading\"\n                class=\"full-width mat-warn\">\n            LOGOUT\n        </button>\n        <kui-progress-indicator *ngIf=\"loading\"></kui-progress-indicator>\n    </div>\n</div>\n`,\n    styles: [`.full-width{width:100%}.button-row,.mat-form-field,.mat-hint{margin-top:24px}.mat-hint{background:rgba(239,83,80,.39);display:block;margin-left:-16px;padding:16px;text-align:center;width:280px}.login-form,.logout-form{margin-left:auto;margin-right:auto;position:relative;width:280px}.login-form .login-form-header,.logout-form .login-form-header{margin-bottom:24px}.login-form .login-field .mat-icon,.logout-form .login-field .mat-icon{font-size:20px;margin-right:12px}.login-form .button-row,.logout-form .button-row{margin-top:48px}.sign-up{margin-top:24px}`]\n})\nexport class LoginFormComponent implements OnInit {\n\n    /**\n     * navigate to the defined url after login\n     */\n    @Input() navigate?: string;\n\n    /**\n     * set your theme color here,\n     * it will be used in the progress-indicator\n     */\n    @Input() color?: string;\n\n    returnUrl: string;\n\n    // is there already a valid session?\n    loggedInUser: string;\n\n    // form\n    frm: FormGroup;\n\n    loading = false;\n\n    // general error message\n    errorMessage: any;\n\n    // specific error messages\n    loginErrorUser = false;\n    loginErrorPw = false;\n    loginErrorServer = false;\n\n    // labels for the login form\n    login = {\n        title: 'Login',\n        name: 'Username',\n        pw: 'Password',\n        button: 'Login',\n        remember: 'Remember me',\n        forgot_pw: 'Forgot password?',\n        error: {\n            failed: 'Password or username is wrong',\n            server: 'There\\'s an error with the server connection. Try it again later or inform the Knora Team'\n        }\n    };\n\n    // error definitions for the following form fields\n    formErrors = {\n        'identifier': '',\n        'password': ''\n    };\n\n    // error messages for the form fields defined in formErrors\n    validationMessages = {\n        'identifier': {\n            'required': 'user name is required.'\n        },\n        'password': {\n            'required': 'password is required'\n        }\n    };\n\n\n    constructor(private _auth: AuthenticationService,\n                private _session: SessionService,\n                private _fb: FormBuilder,\n                private _route: ActivatedRoute,\n                private _router: Router) {\n    }\n\n    ngOnInit() {\n\n        // check if a user is already logged in\n        if (this._session.validateSession()) {\n            this.loggedInUser = JSON.parse(localStorage.getItem('session')).user.name;\n        } else {\n            this.buildForm();\n        }\n    }\n\n    buildForm(): void {\n        this.frm = this._fb.group({\n            identifier: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        this.frm.valueChanges\n            .subscribe(data => this.onValueChanged(data));\n    }\n\n    /**\n     * check for errors while using the form\n     * @param data\n     */\n    onValueChanged(data?: any) {\n\n        if (!this.frm) {\n            return;\n        }\n\n        const form = this.frm;\n\n        Object.keys(this.formErrors).map(field => {\n            this.formErrors[field] = '';\n            const control = form.get(field);\n            if (control && control.dirty && !control.valid) {\n                const messages = this.validationMessages[field];\n                Object.keys(control.errors).map(key => {\n                    this.formErrors[field] += messages[key] + ' ';\n                });\n            }\n        });\n    }\n\n    doLogin() {\n\n        // reset the error messages\n        this.errorMessage = undefined;\n        this.loginErrorUser = false;\n        this.loginErrorPw = false;\n        this.loginErrorServer = false;\n\n        // make sure form values are valid\n        if (this.frm.invalid) {\n            this.loginErrorPw = true;\n            this.loginErrorUser = true;\n            return;\n        }\n\n        // Reset status\n        this.loading = true;\n\n        // Grab values from form\n        const username = this.frm.get('identifier').value;\n        const password = this.frm.get('password').value;\n\n        this._auth.login(username, password)\n            .subscribe(\n                (response: ApiServiceResult) => {\n\n                    // we have a token; set the session now\n                    this._session.setSession(response.body.token, username);\n\n                    setTimeout(() => {\n                        // get return url from route parameters or default to '/'\n                        this.returnUrl = this._route.snapshot.queryParams['returnUrl'] || '/';\n\n\n                        // go back to the previous route or to the route defined in the @Input if navigate exists\n                        if (!this.navigate) {\n                            this._router.navigate([this.returnUrl]);\n                        } else {\n                            this._router.navigate([this.navigate]);\n                        }\n\n                        this.loading = false;\n                    }, 2000);\n                },\n                (error: ApiServiceError) => {\n                    // error handling\n                    if (error.status === 0) {\n                        this.loginErrorUser = false;\n                        this.loginErrorPw = false;\n                        this.loginErrorServer = true;\n                    }\n                    if (error.status === 401) {\n                        this.loginErrorUser = false;\n                        this.loginErrorPw = true;\n                        this.loginErrorServer = false;\n                    }\n                    if (error.status === 404) {\n                        this.loginErrorUser = true;\n                        this.loginErrorPw = false;\n                        this.loginErrorServer = false;\n                    }\n                    this.errorMessage = <any> error;\n                    this.loading = false;\n                }\n            );\n\n    }\n\n    logout() {\n        this._auth.logout();\n        location.reload(true);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatCardModule, MatDialogModule, MatFormFieldModule, MatIconModule, MatInputModule } from '@angular/material';\nimport { KuiActionModule } from '@knora/action';\n\nimport { LoginFormComponent } from './login-form/login-form.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        KuiActionModule,\n        MatCardModule,\n        MatIconModule,\n        MatInputModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        ReactiveFormsModule,\n        HttpClientModule\n    ],\n    declarations: [\n        LoginFormComponent\n    ],\n    exports: [\n        LoginFormComponent\n    ]\n})\nexport class KuiAuthenticationModule {\n}\n","/*\n * Public API Surface of authentication\n */\n\nexport * from './lib/guard/auth.guard';\nexport * from './lib/interceptor/jwt.interceptor';\nexport * from './lib/interceptor/error.interceptor';\nexport * from './lib/login-form/login-form.component';\n\nexport * from './lib/authentication.service';\nexport * from './lib/authentication.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {SessionService as Éµa} from './lib/session/session.service';"],"names":["KnoraConstants","map","Injectable","HttpClient","KuiCoreConfig","Inject","UsersService","Router","catchError","throwError","ApiServiceError","Validators","Component","FormBuilder","ActivatedRoute","Input","NgModule","CommonModule","KuiActionModule","MatCardModule","MatIconModule","MatInputModule","MatButtonModule","MatDialogModule","MatFormFieldModule","ReactiveFormsModule","HttpClientModule"],"mappings":"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"}
